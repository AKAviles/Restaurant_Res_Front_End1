[{"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\index.js":"1","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\App.js":"2","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Layout.js":"3","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Menu.js":"4","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Routes.js":"5","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\NotFound.js":"6","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\date-time.js":"7","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\dashboard\\Dashboard.js":"8","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\api.js":"9","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\ErrorAlert.js":"10","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\format-reservation-date.js":"11","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\ReservationCard.js":"12","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\NewReservation.js":"13","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\ReservationForm.js":"14","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\Edit.js":"15","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\SeatReservation.js":"16","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\Search.js":"17","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\NewTable.js":"18"},{"size":286,"mtime":1628013112335,"results":"19","hashOfConfig":"20"},{"size":333,"mtime":1628625521605,"results":"21","hashOfConfig":"20"},{"size":550,"mtime":1628013112382,"results":"22","hashOfConfig":"20"},{"size":1817,"mtime":1628013112392,"results":"23","hashOfConfig":"20"},{"size":1534,"mtime":1628436448709,"results":"24","hashOfConfig":"20"},{"size":348,"mtime":1628437636927,"results":"25","hashOfConfig":"20"},{"size":2561,"mtime":1628015343091,"results":"26","hashOfConfig":"20"},{"size":6245,"mtime":1628126956544,"results":"27","hashOfConfig":"20"},{"size":4625,"mtime":1628015326060,"results":"28","hashOfConfig":"20"},{"size":486,"mtime":1628013112362,"results":"29","hashOfConfig":"20"},{"size":628,"mtime":1628015363856,"results":"30","hashOfConfig":"20"},{"size":3850,"mtime":1628127985118,"results":"31","hashOfConfig":"20"},{"size":712,"mtime":1628435802575,"results":"32","hashOfConfig":"20"},{"size":9922,"mtime":1628126959441,"results":"33","hashOfConfig":"20"},{"size":819,"mtime":1628015261192,"results":"34","hashOfConfig":"20"},{"size":5324,"mtime":1628016634205,"results":"35","hashOfConfig":"20"},{"size":3444,"mtime":1628016606198,"results":"36","hashOfConfig":"20"},{"size":2574,"mtime":1628016663280,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6qdt9u",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\index.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\App.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Layout.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Menu.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\Routes.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\NotFound.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\date-time.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\dashboard\\Dashboard.js",["79","80"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  listReservations,\n  listTables,\n  finishReservation,\n  changeStatus,\n} from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"../ReservationsAndTables/ReservationCard\";\nimport \"./Dashboard.css\";\n\n/**\n * Defines the dashboard page.\n * @param date\n *  the date for which the user wants to view reservations.\n * @returns {JSX.Element}\n */\n\n//additional hook is needed to get query param from url\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction Dashboard({ date }) {\n  //////  \\/ load reservations \\/  //////\n  //overide default date if \"date\" is present in query param\n  let location = useQuery().get(\"date\");\n  if (location) date = location;\n\n  //states for reservation data and errors\n  const [reservations, setReservations] = useState([]);\n  const [reservationsError, setReservationsError] = useState(null);\n\n  //states for finishing or canceling reservations\n  const [finishIds, setFinishIds] = useState({ tableId: \"\", resId: \"\" });\n  const [cancelled, setCancelled] = useState(\"\");\n\n  //states for tables data and errors\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n  const [tablesLoaded, setTablesLoaded] = useState(false);\n\n  //called on initial render and state update to render table\n  //and reservation data\n  useEffect(() => {\n    loadTables();\n    if (cancelled) {\n      changeStatusCancel(cancelled);\n    }\n  }, [date, cancelled, finishIds]);\n\n  useEffect(() => {\n    if (tablesLoaded) {\n      loadReservations();\n    }\n  }, [tablesLoaded]);\n  // call api to cancel reservation\n  async function changeStatusCancel(cancelledReservation) {\n    const abortController = new AbortController();\n    await changeStatus(\n      \"cancelled\",\n      cancelledReservation,\n      abortController.signal\n    );\n    setCancelled((cancelled) => (cancelled = \"\"));\n    return () => abortController.abort();\n  }\n\n  // call api to load reservation data\n  async function loadReservations() {\n    const abortController = new AbortController();\n    try {\n      setReservationsError(null);\n      const result = await listReservations({ date }, abortController.signal);\n      result.filter(\n        (reservation) =>\n          reservation.status === \"booked\" || reservation.status === \"seated\"\n      );\n\n      setReservations(\n        result.sort(\n          (resA, resB) => resA.reservation_time > resB.reservation_time\n        )\n      );\n    } catch (error) {\n      setReservationsError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  // call api to load tables data\n  async function loadTables() {\n    setTablesLoaded(false);\n    setTables((tables) => (tables = []));\n    setTablesError((error) => (error = null));\n    const { tableId } = finishIds;\n    const abortController = new AbortController();\n    try {\n      if (tableId) {\n        try {\n          await finishReservation(tableId, abortController.signal);\n          setFinishIds({ ...finishIds, tableId: \"\" });\n        } catch (error) {\n          setTablesError(error);\n        }\n      }\n      const fetchedTables = await listTables(abortController.signal);\n      setTables((tbls) => (tbls = fetchedTables));\n      setTablesLoaded(true);\n    } catch (error) {\n      setTablesError(error);\n    }\n\n    return () => abortController.abort();\n  }\n  // handle state when finish button is pressed\n  function finishHandler({ target }) {\n    if (\n      window.confirm(\n        \"Is this table ready to seat new guests? This cannot be undone.\"\n      )\n    ) {\n      setFinishIds({\n        tableId: target.dataset.tableIdFinish,\n        resId: target.dataset.reservationIdFinish,\n      });\n    }\n  }\n\n  // format tables list to jsx elements\n  const tablesList = tables.map((table) => {\n    let backgroundColor = table.reservation_id ? \"occupied\" : \"free\";\n    return (\n      <li className={`list-group-item ${backgroundColor}`} key={table.table_id}>\n        <div>\n          <div className='row'>\n            <div className='col'>\n              <h4>Table Name</h4>\n              <p>{table.table_name}</p>\n              <h4>Table Capacity</h4>\n              <p>{table.capacity}</p>\n            </div>\n            {table.reservation_id ? (\n              <div className='row'>\n                <div className='col'>\n                  <span\n                    className='badge bg-success'\n                    data-table-id-status={table.table_id}\n                  >\n                    occupied\n                  </span>\n                  <br />\n                  <button\n                    onClick={finishHandler}\n                    data-table-id-finish={table.table_id}\n                    data-reservation-id-finish={table.reservation_id}\n                    className='btn btn-danger'\n                  >\n                    Finish\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <span\n                  data-table-id-status={table.table_id}\n                  className='badge bg-primary'\n                >\n                  free\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <main className='container'>\n      <div className='row'>\n        <div className='col'>\n          <h1>Dashboard</h1>\n          <div className='d-md-flex mb-3'>\n            <h5 className='mb-0'>Reservations for date: {date}</h5>\n          </div>\n          <div className='col'>\n            <h2>Tables</h2>\n            <ErrorAlert error={tablesError} />\n            <ul className='list-group'>{tablesList}</ul>\n          </div>\n          <div className='col'>\n            <h2>Reservations</h2>\n            <ErrorAlert error={reservationsError} />\n            <ul className='list-group'>\n              {\n                <ReservationCard\n                  reservations={reservations}\n                  cancelled={cancelled}\n                  setCancelled={setCancelled}\n                />\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Dashboard;\n","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\api.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\layout\\ErrorAlert.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\utils\\format-reservation-date.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\ReservationCard.js",["81"],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./ReservationCard.css\";\r\n\r\nfunction ReservationCard({ reservations, setCancelled }) {\r\n  const [reservationElements, setReservationElements] = useState([]);\r\n  const { pathname } = useLocation();\r\n\r\n  const isSearch = pathname.includes(\"search\");\r\n\r\n  //implement into dashboard\r\n  useEffect(() => {\r\n    setReservationElements(formatElements(reservations));\r\n  }, [reservations]);\r\n\r\n  function cancelBtnHandler({ target }) {\r\n    if (\r\n      window.confirm(\r\n        \"Do you want to cancel this reservation? This cannot be undone.\"\r\n      )\r\n    ) {\r\n      setCancelled(\r\n        (cancelled) => (cancelled = target.dataset.reservationIdCancel)\r\n      );\r\n    }\r\n  }\r\n\r\n  function formatElements(reservations) {\r\n    const formattedReservationElements = reservations.map((reservation) => {\r\n      const {\r\n        status,\r\n        reservation_id,\r\n        reservation_time,\r\n        reservation_date,\r\n        first_name,\r\n        last_name,\r\n        people,\r\n        created_at,\r\n        mobile_number,\r\n      } = reservation;\r\n\r\n      // reservations can only be canceled, seated, or edited if they have status \"booked\"\r\n      const booked = status === \"booked\";\r\n      const buttons = (\r\n        <div className='row justify-content-end'>\r\n          <div>\r\n            <a\r\n              className='btn btn-outline-warning'\r\n              href={`/reservations/${reservation_id}/edit`}\r\n              role='button'\r\n            >\r\n              edit\r\n            </a>\r\n          </div>\r\n          <div>\r\n            {}\r\n            <button\r\n              className='btn btn-outline-danger'\r\n              onClick={cancelBtnHandler}\r\n              data-reservation-id-cancel={reservation.reservation_id}\r\n            >\r\n              cancel\r\n            </button>\r\n          </div>\r\n          <a\r\n            href={`/reservations/${reservation_id}/seat`}\r\n            role='button'\r\n            className='btn btn-outline-primary'\r\n          >\r\n            seat\r\n          </a>\r\n        </div>\r\n      );\r\n\r\n      const reservationElement = (\r\n        <div\r\n          className='card'\r\n          key={reservation_id}\r\n          style={{ marginBottom: \"5px\" }}\r\n        >\r\n          <div className='row justify-content-between'>\r\n            <h3>\r\n              {last_name}, {first_name}\r\n            </h3>\r\n            <div>\r\n              <span\r\n                className='badge bg-primary'\r\n                data-reservation-id-status={reservation.reservation_id}\r\n              >\r\n                {status}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='row'>\r\n            <div className='col'>\r\n              <h5>Mobile Number</h5>\r\n              <p>{mobile_number}</p>\r\n            </div>\r\n            <div className='col'>\r\n              <h5>Date and Time:</h5>\r\n              <p>\r\n                {reservation_date}, {reservation_time}\r\n              </p>\r\n            </div>\r\n            <div className='col'>\r\n              <h5>Party Size:</h5>\r\n              <p>{people}</p>\r\n            </div>\r\n          </div>\r\n          <div className='row'>\r\n            <div className='row align-items-end'>\r\n              <p className='col-5 ' style={{ marginLeft: \"20px\" }}>\r\n                Created at: {created_at}\r\n              </p>\r\n              <p className='col'>Reservation ID: {reservation_id}</p>\r\n            </div>\r\n            <div className='col'>{booked && !isSearch ? buttons : null}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n      if (status !== \"cancelled\") {\r\n        return reservationElement;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return formattedReservationElements;\r\n  }\r\n\r\n  return reservationElements;\r\n}\r\n\r\nexport default ReservationCard;\r\n","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\NewReservation.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\ReservationForm.js",["82","83"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { createReservation, editReservation } from \"../utils/api\";\r\nimport { today, formatDate, asDateString } from \"../utils/date-time\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { changeStatus } from \"../utils/api\";\r\n\r\nconst newToday = today();\r\n\r\nfunction ReservationForm({ initialFormData }) {\r\n  const history = useHistory();\r\n  const { pathname } = useLocation();\r\n  const isEdit = pathname.includes(\"edit\");\r\n  const isNew = pathname.includes(\"new\");\r\n\r\n  const [reservation, setReservation] = useState({ ...initialFormData });\r\n  const [error, setError] = useState(\"\");\r\n  const [submitAttempt, setSubmitAttempt] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let dateChosen = new Date(initialFormData.reservation_date);\r\n    if (isEdit) {\r\n      setReservation({\r\n        ...initialFormData,\r\n        reservation_date: asDateString(dateChosen),\r\n      });\r\n    }\r\n  }, [initialFormData]);\r\n\r\n  function validReservationDates({ target }) {\r\n    // dates must be in converted from yyyy/mm/dd to mm/dd/yyyy for Date.prototype conversion\r\n    const dateChosen = new Date(formatDate(target.value));\r\n    const today = new Date(formatDate(newToday));\r\n    const isNotTuesday = dateChosen.getDay() !== 2; // 2 = tuesday's index\r\n    const isThisDayOrAfter = dateChosen.getDate() >= today.getDate();\r\n    const isThisMonthOrAfter = dateChosen.getMonth() >= today.getMonth();\r\n    const isThisYearOrAfter = dateChosen.getFullYear() >= today.getFullYear();\r\n    const isAfterThisYear = dateChosen.getFullYear() - today.getFullYear() > 0;\r\n    if (\r\n      (isNotTuesday &&\r\n        isThisDayOrAfter &&\r\n        isThisMonthOrAfter &&\r\n        isThisYearOrAfter) ||\r\n      isAfterThisYear\r\n    ) {\r\n      setError(\"\");\r\n      setSubmitAttempt(false);\r\n      setReservation(\r\n        (form) => (form = { ...form, reservation_date: target.value })\r\n      );\r\n    } else {\r\n      setReservation(\r\n        (form) => (form = { ...form, reservation_date: target.value })\r\n      );\r\n      setError({\r\n        message: \"Please enter a valid date. (We are closed on tuesdays)\",\r\n      });\r\n    }\r\n\r\n    // validate time in case date was set after time\r\n    validReservationTimes();\r\n  }\r\n\r\n  function badTime() {\r\n    setError({\r\n      message:\r\n        \"Please enter a valid time. (We reserve tables from 10:30AM to 9:30PM.)\",\r\n    });\r\n  }\r\n\r\n  function validReservationTimes({ target } = reservation.reservation_time) {\r\n    let timeChosen;\r\n\r\n    if (target) {\r\n      timeChosen = target.value;\r\n    } else {\r\n      timeChosen = reservation.reservation_time;\r\n    }\r\n\r\n    setReservation(\r\n      (form) => (form = { ...form, reservation_time: timeChosen })\r\n    );\r\n\r\n    let chosenMinutes = Number(`${timeChosen[3]}${timeChosen[4]}`);\r\n    let chosenHour = Number(`${timeChosen[0]}${timeChosen[1]}`);\r\n\r\n    const currentTime = new Date(Date.now());\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n\r\n    //return error message if chosen time is outsisde operating hours\r\n\r\n    if (\r\n      (chosenHour >= 21 && chosenMinutes > 30) ||\r\n      chosenHour > 21 ||\r\n      (chosenHour <= 10 && chosenMinutes < 30) ||\r\n      chosenHour < 10\r\n    ) {\r\n      badTime();\r\n    } else {\r\n      setError(\"\");\r\n      setSubmitAttempt(false);\r\n    }\r\n\r\n    if (reservation.reservation_date === newToday) {\r\n      // if the chosen hour is later than the current hour (current hour is less than chosen hour) set reservation time\r\n      if (currentHour < chosenHour) {\r\n        setError(\"\");\r\n        setSubmitAttempt(false);\r\n      }\r\n      // if the chosen hour is earlier than the current hour (current hour is greater than the chosen hour ) display error message\r\n      else if (currentHour > chosenHour) {\r\n        badTime();\r\n      }\r\n      // if hours are the same check minutes\r\n      else {\r\n        // if the chosen minute is later than the current minute ( current minute is less than the chosen minute ) set reservation time\r\n        if (currentMinute < chosenMinutes) {\r\n          setError(\"\");\r\n          setSubmitAttempt(false);\r\n        }\r\n        // if the chosen minute is earlier than the current minute (current minute is greater than chosen minute) display error message\r\n        else {\r\n          badTime();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleChange({ target: { name, value } }) {\r\n    setReservation({ ...reservation, [name]: value });\r\n  }\r\n\r\n  function navigateToDashboard() {\r\n    history.push(`/dashboard?date=${reservation.reservation_date}`);\r\n  }\r\n\r\n  const [cancelled, setCancelled] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (cancelled) {\r\n      changeStatusCancel(cancelled);\r\n      navigateToDashboard();\r\n    }\r\n  }, [cancelled]);\r\n\r\n  // call api to cancel reservation\r\n  async function changeStatusCancel(cancelledReservation) {\r\n    const abortController = new AbortController();\r\n    await changeStatus(\r\n      \"cancelled\",\r\n      cancelledReservation,\r\n      abortController.signal\r\n    );\r\n    setCancelled((can) => (can = \"\"));\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function cancelBtnHandler(event) {\r\n    event.preventDefault();\r\n    if (\r\n      window.confirm(\r\n        \"Do you want to cancel this reservation? This cannot be undone.\"\r\n      )\r\n    ) {\r\n      setCancelled((cancelled) => (cancelled = reservation.reservation_id));\r\n    }\r\n  }\r\n\r\n  async function APIOnSubmit(event) {\r\n    const abortController = new AbortController();\r\n    setError(null);\r\n    //if this is an edit: call editReservation from API, else: call is createReservation from API\r\n    if (isEdit) {\r\n      try {\r\n        await editReservation(\r\n          { ...reservation, people: Number(reservation.people) },\r\n          reservation.reservation_id,\r\n          abortController.signal\r\n        );\r\n        // navigate to dashboard is promise is resolved\r\n        navigateToDashboard();\r\n      } catch (error) {\r\n        //set error to display if caught\r\n        setError((err) => (err = error));\r\n      }\r\n    } else if (isNew) {\r\n      try {\r\n        await createReservation(\r\n          { ...reservation, people: Number(reservation.people) },\r\n          abortController.signal\r\n        );\r\n        // navigate to dashboard is promise is resolved\r\n        navigateToDashboard();\r\n      } catch (error) {\r\n        //set error to display if caught\r\n        setError((err) => (err = error));\r\n      }\r\n    }\r\n\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    setSubmitAttempt(true);\r\n    if (!error) {\r\n      APIOnSubmit(event);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <div>{submitAttempt ? <ErrorAlert error={error} /> : null}</div>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <label htmlFor='first_name'>First Name</label>\r\n            <br />\r\n            <input\r\n              type='text'\r\n              onChange={handleChange}\r\n              name='first_name'\r\n              value={reservation.first_name}\r\n              required={true}\r\n            />\r\n          </div>\r\n          <div className='col'>\r\n            <label htmlFor='last_name'>Last Name</label>\r\n            <br />\r\n            <input\r\n              type='text'\r\n              onChange={handleChange}\r\n              name='last_name'\r\n              value={reservation.last_name}\r\n              required={true}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <label htmlFor='mobile_number'>Mobile Number</label>\r\n            <br />\r\n            <input\r\n              type='text'\r\n              onChange={handleChange}\r\n              name='mobile_number'\r\n              value={reservation.mobile_number}\r\n              required={true}\r\n            />\r\n          </div>\r\n          <div className='col'>\r\n            <label htmlFor='people'>Party Size</label>\r\n            <br />\r\n            <input\r\n              type='text'\r\n              onChange={handleChange}\r\n              name='people'\r\n              value={reservation.people}\r\n              required={true}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <label htmlFor='reservation_date'>Date of Reservation</label>\r\n            <br />\r\n            <input\r\n              type='date'\r\n              onChange={validReservationDates}\r\n              name='reservation_date'\r\n              value={reservation.reservation_date}\r\n              required={true}\r\n            />\r\n          </div>\r\n          <div className='col'>\r\n            <label htmlFor='reservation_time'>Time of Reservation</label>\r\n            <br />\r\n            <input\r\n              type='time'\r\n              onChange={validReservationTimes}\r\n              name='reservation_time'\r\n              value={reservation.reservation_time}\r\n              required={true}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{ margin: \"25px 0 0 0\" }}\r\n          className='row w-75 justify-content-center'\r\n        >\r\n          <button className='btn btn-primary' type='submit'>\r\n            Submit\r\n          </button>\r\n          <button\r\n            onClick={() =>\r\n              history.push(`/dashboard?date=${reservation.reservation_date}`)\r\n            }\r\n            className='btn btn-secondary'\r\n            type='cancel'\r\n          >\r\n            Cancel\r\n          </button>\r\n          {isEdit ? (\r\n            <div>\r\n              <button onClick={cancelBtnHandler} className='btn btn-danger'>\r\n                Cancel Reservation\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReservationForm;\r\n","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\Edit.js",[],"C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\SeatReservation.js",["84"],"import React, { useState, useEffect } from \"react\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport { listTables, assignResIdToTable, getReservation } from \"../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nfunction SeatReservation() {\r\n  const { reservation_id } = useParams();\r\n  const history = useHistory();\r\n\r\n  ////// \\/ load tables \\/ \\\\\\\\\\\\\r\n  const [tables, setTables] = useState([]);\r\n  const [tablesError, setTablesError] = useState(null);\r\n  useEffect(loadTables, [reservation_id]);\r\n\r\n  function loadTables() {\r\n    const abortController = new AbortController();\r\n    setTablesError(null);\r\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  const tablesList = tables.map((table) => {\r\n    if (!table.reservation_id) {\r\n      return (\r\n        <option\r\n          key={table.table_id}\r\n          value={table.table_id}\r\n          name={table.table_name}\r\n          cap={table.capacity}\r\n        >\r\n          {table.table_name} - {table.capacity}\r\n        </option>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  // \\/Load reservation\\/ \\\\\r\n  useEffect(() => {\r\n    loadReservationData();\r\n  }, []);\r\n\r\n  const [reservation, setReservation] = useState(\"\");\r\n  const [reservationError, setReservationError] = useState(null);\r\n  const [reservationElement, setReservationElement] = useState(\"\");\r\n\r\n  async function loadReservationData() {\r\n    const abortController = new AbortController();\r\n    try {\r\n      const reservation = await getReservation(\r\n        reservation_id,\r\n        abortController.signal\r\n      );\r\n      setReservation(reservation);\r\n      setReservationElement(\r\n        (reservationElement) =>\r\n          (reservationElement = (\r\n            <div>\r\n              <h4>The {reservation.last_name} party</h4>\r\n              <h5>Reservation Holder:</h5>{\" \"}\r\n              <p>\r\n                {reservation.last_name}, {reservation.first_name}\r\n              </p>\r\n              <h5>Phone Number</h5> <p>{reservation.mobile_number}</p>\r\n              <h5>Party of:</h5> <p>{reservation.people} people</p>\r\n              <h5>Reservation Time</h5>\r\n              <p>{reservation.reservation_time}</p>\r\n            </div>\r\n          ))\r\n      );\r\n    } catch (error) {\r\n      setReservationError(error);\r\n    }\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  // \\/handle select state\\/ \\\\\r\n\r\n  const [selection, setSelection] = useState(\"select a table\");\r\n  const [tableCap, setTableCap] = useState(\"\");\r\n  const [partyIsSmallerThanCap, setPartyIsSmallerThanCap] = useState(true);\r\n  const [nothingSelected, setNothingSelected] = useState(true);\r\n\r\n  function handleChange(event) {\r\n    setNothingSelected(false);\r\n    let count = 0;\r\n    while (event.target[count]) {\r\n      if (event.target[count].getAttribute(\"value\") === event.target.value) {\r\n        const tableCap = event.target[count].getAttribute(\"cap\");\r\n        setTableCap(tableCap);\r\n      }\r\n      setSelection(event.target.value);\r\n      count++;\r\n    }\r\n  }\r\n\r\n  /// \\/ assign table \\/ \\\\\\\\\r\n\r\n  function partyIsSmallerThanCapacity() {\r\n    return Number(tableCap) >= Number(reservation.people);\r\n  }\r\n\r\n  async function handleSubmit(event) {\r\n    const abortController = new AbortController();\r\n    event.preventDefault();\r\n    const partyIsSmallerThanCap = partyIsSmallerThanCapacity();\r\n\r\n    if (partyIsSmallerThanCap) {\r\n      setPartyIsSmallerThanCap(true);\r\n      //await changeStatus(\"seated\", reservation_id);\r\n      await assignResIdToTable(\r\n        reservation_id,\r\n        selection,\r\n        abortController.signal\r\n      );\r\n      history.push(\r\n        `/dashboard?date=${reservation.reservation_date.substring(0, 10)}`\r\n      );\r\n    } else {\r\n      setPartyIsSmallerThanCap(false);\r\n    }\r\n    return () => abortController.abort();\r\n  }\r\n\r\n  function handleCancel() {\r\n    history.push(\r\n      `/dashboard?date=${reservation.reservation_date.substring(0, 10)}`\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='row'></div>\r\n      <h4>Choose table to seat reservation #{reservation_id}</h4>\r\n      <div>\r\n        <h3>Reservation information:</h3>\r\n        <ErrorAlert error={reservationError} />\r\n        {reservationElement}\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <h5>Available tables:</h5>\r\n          <ErrorAlert error={tablesError} />\r\n          <select name='table_id' onChange={handleChange}>\r\n            {nothingSelected ? <option>select a table</option> : null}\r\n            {tablesList}\r\n          </select>\r\n        </label>\r\n        <div>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Seat Table\r\n          </button>\r\n          <button\r\n            type='reset'\r\n            onClick={handleCancel}\r\n            className='btn btn-warning'\r\n          >\r\n            Cancel\r\n          </button>\r\n          <div>\r\n            {partyIsSmallerThanCap ? null : (\r\n              <p className='alert alert-danger'>\r\n                Please make a new table selection. (Capacity may be too small\r\n                for reservation.)\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SeatReservation;\r\n","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\Search.js",["85","86"],"import React, { useEffect, useState } from \"react\";\r\nimport { searchByNumber } from \"../utils/api\";\r\nimport ErrorAlert from \"../layout/ErrorAlert\";\r\nimport ReservationCard from \"./ReservationCard\";\r\n\r\nfunction Search() {\r\n  const placeholder = \"Enter a customer's phone number\";\r\n  const [reservations, setReservations] = useState([]);\r\n  const [mobile_number, setMobileNumber] = useState(placeholder);\r\n  const [searchError, setSearchError] = useState(\"\");\r\n  const [emptySearch, setEmptySearch] = useState(true);\r\n  const [noResultsFound, setNoResultsFound] = useState(true);\r\n  const [clicked, setClicked] = useState(0);\r\n  useEffect(() => {\r\n    loadReservations();\r\n  }, [mobile_number, clicked]);\r\n\r\n  async function loadReservations() {\r\n    try {\r\n      if (mobile_number) {\r\n        const reservationResults = await searchByNumber(mobile_number);\r\n        setReservations(reservationResults);\r\n        setNoResultsFound(false);\r\n        if (\r\n          mobile_number &&\r\n          !reservations.length &&\r\n          mobile_number !== placeholder\r\n        ) {\r\n          setNoResultsFound(true);\r\n        }\r\n      } else {\r\n        setNoResultsFound(true);\r\n      }\r\n    } catch (error) {\r\n      setSearchError(error);\r\n      setNoResultsFound(true);\r\n    }\r\n  }\r\n\r\n  function search(value) {\r\n    if (value) {\r\n      setEmptySearch(false);\r\n      setMobileNumber(value);\r\n    } else {\r\n      setEmptySearch(true);\r\n      setMobileNumber(value);\r\n    }\r\n  }\r\n\r\n  function onChange({ target: { value } }) {\r\n    if (value !== \" \" || value !== \"\") search(value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    search(mobile_number);\r\n  }\r\n\r\n  const noResultsFoundElement = (\r\n    <div>\r\n      <h5>No reservations found</h5>\r\n    </div>\r\n  );\r\n\r\n  const emptySearchElement = (\r\n    <div className='row justify-content-center'>\r\n      <h4>Enter a mobile number to search reservations.</h4>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div style={{ margin: \"30px 0 30px 30px\" }}>\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <ErrorAlert error={searchError} />\r\n          <div className='row align-items-end'>\r\n            <div className='col'>\r\n              <label className='w-100'>\r\n                <h5>Search by mobile number:</h5>\r\n                <input\r\n                  className='w-75 p-1'\r\n                  type='search'\r\n                  value={mobile_number}\r\n                  onClick={() => {\r\n                    if (mobile_number === placeholder) setMobileNumber(\"\");\r\n                  }}\r\n                  onChange={onChange}\r\n                  name='mobile_number'\r\n                ></input>\r\n              </label>\r\n            </div>\r\n            <div className='col'>\r\n              <button\r\n                type='submit'\r\n                role='button'\r\n                onClick={() => {\r\n                  setClicked(clicked + 1);\r\n                }}\r\n                className='btn btn-primary'\r\n              >\r\n                Find\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div className='col p-5'>\r\n        {emptySearch ? (\r\n          emptySearchElement\r\n        ) : (\r\n          <ReservationCard reservations={reservations} />\r\n        )}\r\n      </div>\r\n      <div className='col'>{noResultsFound ? noResultsFoundElement : null}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","C:\\Users\\ANTHONU\\Desktop\\starter-restaurant-reservation-main\\front-end\\src\\ReservationsAndTables\\NewTable.js",[],{"ruleId":"87","severity":1,"message":"88","line":51,"column":6,"nodeType":"89","endLine":51,"endColumn":34,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":57,"column":6,"nodeType":"89","endLine":57,"endColumn":20,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":14,"column":6,"nodeType":"89","endLine":14,"endColumn":20,"suggestions":"94"},{"ruleId":"87","severity":1,"message":"95","line":28,"column":6,"nodeType":"89","endLine":28,"endColumn":23,"suggestions":"96"},{"ruleId":"87","severity":1,"message":"97","line":145,"column":6,"nodeType":"89","endLine":145,"endColumn":17,"suggestions":"98"},{"ruleId":"87","severity":1,"message":"99","line":42,"column":6,"nodeType":"89","endLine":42,"endColumn":8,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"91","line":16,"column":6,"nodeType":"89","endLine":16,"endColumn":30,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":95,"column":15,"nodeType":"104","endLine":102,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTables'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useEffect has a missing dependency: 'loadReservations'. Either include it or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'formatElements'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'navigateToDashboard'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'loadReservationData'. Either include it or remove the dependency array.",["110"],["111"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [date, cancelled, finishIds, loadTables]",{"range":"126","text":"127"},"Update the dependencies array to be: [loadReservations, tablesLoaded]",{"range":"128","text":"129"},"Update the dependencies array to be: [formatElements, reservations]",{"range":"130","text":"131"},"Update the dependencies array to be: [initialFormData, isEdit]",{"range":"132","text":"133"},"Update the dependencies array to be: [cancelled, navigateToDashboard]",{"range":"134","text":"135"},"Update the dependencies array to be: [loadReservationData]",{"range":"136","text":"137"},"Update the dependencies array to be: [mobile_number, clicked, loadReservations]",{"range":"138","text":"139"},[1568,1596],"[date, cancelled, finishIds, loadTables]",[1681,1695],"[loadReservations, tablesLoaded]",[475,489],"[formatElements, reservations]",[1006,1023],"[initialFormData, isEdit]",[4829,4840],"[cancelled, navigateToDashboard]",[1237,1239],"[loadReservationData]",[676,700],"[mobile_number, clicked, loadReservations]"]